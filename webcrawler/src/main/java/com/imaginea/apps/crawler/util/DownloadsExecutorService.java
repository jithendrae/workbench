package com.imaginea.apps.crawler.util;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Component;

import com.gargoylesoftware.htmlunit.html.DomAttr;

/*
 * The DownloadsExecutorService manages all threading for the purpose
 * of downloading the links generated by the Parser.
 */

@Component("DownloadsExecutorService")
public class DownloadsExecutorService {

	private ThreadPoolTaskExecutor exec;

	static final Logger LOG = LoggerFactory.getLogger(LinkDownloadThread.class);
	
	@Autowired
	private ApplicationContext ctx;	
	
	private ConcurrentLinkedQueue<Future> futs = new ConcurrentLinkedQueue<>();

	public void setExecutorProfile(){
		exec = new ThreadPoolTaskExecutor();		
		exec.initialize();
		exec.setQueueCapacity(200);
		exec.setCorePoolSize(200);
		exec.setMaxPoolSize(200);
		exec.setDaemon(true);
		exec.setKeepAliveSeconds(120);
		
	/*	exec.setRejectedExecutionHandler(new RejectedExecutionHandler() {
			
			@Override
			public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {
				try 
				{
					if(!executor.isTerminating())
						executor.getQueue().put(r);
				} 
				catch (InterruptedException e) 
				{
					LOG.error("Reject task unable to be queued" + e.getMessage());
					e.printStackTrace();
				}
				
			}
		});*/
	}
	
	public void addDownloadLinks(String link){
		
	}
	
	public void addDownloadLinks(String mailbox, List<DomAttr> list){
		
		for(DomAttr link:list){
			LinkDownloadThread worker = (LinkDownloadThread) ctx.getBean("LinkDownloadThread");
			worker.setDownloadUrl(mailbox + link.getTextContent());
			worker.setLinkStatus("new");
			futs.add(exec.submit(worker));			
		}
	}
	
	public boolean shutdownExecutor(){	
		
		boolean shutdownStatus = false;
		
		try
		{
			exec.getThreadPoolExecutor().shutdown();
			exec.getThreadPoolExecutor().awaitTermination(120, TimeUnit.SECONDS);	
		}
		catch(IllegalStateException|InterruptedException e)
		{
			e.printStackTrace();
		}
		
		return shutdownStatus;
			
	}

	public boolean isClosed() {
		
		LOG.info("Active Thread count on executor is " + exec.getActiveCount());

		if(exec.getActiveCount()>1)
			return false;
		
		else
			return true;
	}

	public void addDownloadLinks(ArrayList<String> list) {
		
		for(String link:list){
			LinkDownloadThread worker = (LinkDownloadThread) ctx.getBean("LinkDownloadThread");
			worker.setDownloadUrl(link);
			worker.setLinkStatus("resume");
			futs.add(exec.submit(worker));			
		}
	}


}
